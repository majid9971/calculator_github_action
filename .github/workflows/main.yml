name: Build, SonarCloud Analysis, and JFrog Upload Workflow

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  sonarqube:
    name: SonarCloud Analysis and JFrog Upload
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for Sonar analysis

      # Step 2: Set up JDK 11
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: temurin

      # Step 3: Install Maven
      - name: Install Maven
        run: |
          sudo apt-get update
          sudo apt-get install -y maven

      # Step 4: Run Maven Build
      - name: Build Project
        run: |
          mvn clean verify

      # # Step 5: SonarCloud Scan
      - name: Run SonarQube Analysis
        run: ./scripts/run-sonarqube-analysis.sh
        env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      
      # - name: SonarCloud Scan
      #   uses: SonarSource/sonarqube-scan-action@v4
      #   with:
      #     args: >
      #       -Dsonar.projectKey=majid9971_latest-java
      #       -Dsonar.projectName=latest_java
      #       -Dsonar.projectVersion=1.8
      #       -Dsonar.sources=.
      #       -Dsonar.java.binaries=target/classes
      #       -Dsonar.jacoco.reportPaths=target/jacoco.exec
      #       -Dsonar.pdf.issue.details=BUG,CODE_SMELL,VULNERABILITY
      #       -Dsonar.pdf.other.metrics=uncovered_lines
      #       -Dsonar.pdf.skip=false
      #       -Dsonar.host.url=https://sonarcloud.io
      #       -Dsonar.organization=majid9971
      #       -Dsonar.branch.name=main
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

       # Step 6: Install JFrog CLI
      - name: Install JFrog CLI
        run: |
          curl -fL https://getcli.jfrog.io | sh
          chmod +x jfrog
          sudo mv jfrog /usr/local/bin/

      # Step 7: Configure JFrog CLI
      - name: Configure JFrog CLI
        run: |
          jfrog config add my-server \
            --artifactory-url ${{ secrets.JFROG_URL }} \
            --user ${{ secrets.JFROG_USERNAME }} \
            --password ${{ secrets.JFROG_PASSWORD }}

       # Step 8: Upload Build Artifacts to JFrog
    #  - name: Upload Build Artifacts to JFrog
     #   run: |
      #    jfrog rt upload "target/*.jar" "githubaction/githubaction/"

    # Step 9: Generate code coverage report
      - name: Generate code coverage report
        run: |
          mvn jacoco:report

      # Step 10: Publish code coverage result
      - name: Publish code coverage result
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage
          path: target/site/jacoco/index.html
          
  notify:
    runs-on: ubuntu-latest
    needs:  sonarqube
    if: always()  # Run this job regardless of the result of previous jobs

    steps:
      # Step 1: Send notification to Slack using Incoming Webhook
      - name: Notify Slack
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data '{"text": "GITHUB HOSTED SonarQube analysis of calculator completed with status: ${{ needs.sonarqube.result }}."}' \
          ${{ secrets.SLACK_WEBHOOK_URL }}
